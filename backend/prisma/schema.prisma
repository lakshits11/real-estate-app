// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  email     String      @unique
  username  String      @unique
  password  String
  avatar    String?
  createdAt DateTime    @default(now())
  Post      Post[]
  SavedPost SavedPost[]
  Chat      Chat[]      @relation(fields: [chatIds], references: [id])
  chatIds   String[]    @db.ObjectId
}

model Post {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  price       Int
  images      String[]
  city        String
  address     String
  room        Int
  bathroom    Int
  type        Type
  property    Property
  latitude    String
  longitude   String
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  postdetails PostDetails?
  SavedPost   SavedPost[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  villa
  office
  land
}

model PostDetails {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  utilities   String?
  pet         Boolean?
  income      String?
  size        Int?
  hospital    Int?
  airport     Int?
  mall        Int?
  post        Post     @relation(fields: [postId], references: [id])
  postId      String   @unique @db.ObjectId
}

model SavedPost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  postId String @db.ObjectId
  userId String @db.ObjectId

  @@unique([userId, postId])
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  users       User[]    @relation(fields: [userIds], references: [id])
  userIds     String[]  @db.ObjectId
  seenBy      String[]  @db.ObjectId
  Message     Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  senderId  String
  createdAt DateTime @default(now())
}
